{"version":3,"sources":["FormContext.js","FormTitleCapture.jsx","Field.jsx","common/Hooks.jsx","Sections.jsx","App.js","serviceWorker.js","index.js"],"names":["FormStateContext","React","createContext","FormDispatchContext","controlSchema","label","required","type","staticSchema","sectionSchema","controls","newSectionSchema","JSON","parse","stringify","initialState","title","sectionIndex","hasChanges","sections","debouncedOnSave","debounce","form","dispatch","fetch","method","headers","body","then","key","value","catch","err","console","error","reducer","action","undefined","Error","length","warn","splice","section","index","FormProvider","children","useReducer","Provider","useFormState","context","useContext","useFormDispatch","useForm","FormTitleCapture","id","onChange","e","target","htmlFor","className","AddNewField","onClick","EditStatic","placeholder","EditInput","checked","EditControl","props","controlForType","text","number","DisplayControl","controlProps","Control","Field","useState","isInFocus","setisInFocus","focusTimeout","setFocusTimeout","onBlur","useCallback","timeout","setTimeout","onFocus","clearTimeout","useIsInFocus","tabIndex","FormFields","map","control","Section","SectionControls","numberOfSectons","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.843ad41a.chunk.js","sourcesContent":["import React, {useReducer} from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst FormStateContext = React.createContext();\r\nconst FormDispatchContext = React.createContext();\r\n\r\nconst controlSchema = {\r\n    label: null,\r\n    required: false,\r\n    type: \"text\",\r\n};\r\n\r\nconst staticSchema = {\r\n    label: null,\r\n    type: \"title\",\r\n};\r\n\r\n// Will need to deep copy when using to avoid the same \"controls\" array being referenced by multiple sections\r\nconst sectionSchema = {\r\n    controls: [\r\n        {\r\n            ...staticSchema\r\n        }\r\n    ]\r\n};\r\nconst newSectionSchema = () => JSON.parse(JSON.stringify(sectionSchema));\r\n\r\nconst initialState = {\r\n    title: \"Untitled form\",\r\n    sectionIndex: 0,\r\n    hasChanges: false,\r\n    sections: [\r\n        {\r\n            ...newSectionSchema()\r\n        }\r\n    ]\r\n};\r\n\r\nconst onSave = (form, dispatch) => (\r\n    fetch('http://amazon.co.uk', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(form)\r\n    })\r\n    .then(() => dispatch({type: 'setValue', key: 'hasChanges', value: false}))\r\n    .catch(err => {\r\n        console.error(err);\r\n    })\r\n);\r\nconst debouncedOnSave = debounce(onSave, 5000);\r\n\r\nconst reducer = (form, action) => {\r\n    switch (action.type) {\r\n        case 'setValue': {\r\n            const {value, key} = action;\r\n\r\n            if(value === undefined || !key) {\r\n                throw new Error(`setValue must be called with a value and key. You provided value: ${value}, key: ${key}`);\r\n            }\r\n            return {...form, [key]: value};\r\n        }\r\n        case 'addNewSection': {\r\n            let {sections} = form;\r\n            // Add new section then switch to it\r\n            return {\r\n                ...form,\r\n                sectionIndex: sections.length,\r\n                sections: [\r\n                    ...sections, \r\n                    {...newSectionSchema()}\r\n                ] ,\r\n                hasChanges: true\r\n            };   \r\n        }\r\n        case 'deleteSection': {\r\n            // Delete given section and move to the next one down\r\n            const {sections, sectionIndex} = form;\r\n\r\n            if(sections.length === 0) {\r\n                console.warn(\"Cannot remove your last section. Aborting...\");\r\n                return form;\r\n            }\r\n\r\n            sections.splice(sectionIndex, 1);\r\n            return {\r\n                ...form,\r\n                sectionIndex: \r\n                    sectionIndex === 0 \r\n                        ? 0\r\n                        : form.sectionIndex - 1\r\n                        ,\r\n                sections,\r\n                hasChanges: true\r\n            };\r\n        }\r\n        case 'switchToNextSection': {\r\n            return {\r\n                ...form, \r\n                sectionIndex: form.sectionIndex + 1\r\n            };\r\n        }\r\n        case 'switchToPreviousSection': {\r\n            return {\r\n                ...form, \r\n                sectionIndex: form.sectionIndex - 1\r\n            };\r\n        }\r\n\r\n        case 'addNewInputField': {\r\n            const {sectionIndex} = form;\r\n            const sections = [...form.sections];\r\n            const section = sections[sectionIndex];            \r\n            section.controls = [...section.controls, {...controlSchema}];\r\n\r\n            return {\r\n                ...form, \r\n                sections: [...sections],\r\n                hasChanges: true\r\n            };\r\n        }\r\n\r\n        case 'addNewStaticField': {\r\n            const {sectionIndex} = form;\r\n            const sections = [...form.sections];\r\n            const section = sections[sectionIndex];\r\n            section.controls = [...section.controls, {...staticSchema}];\r\n\r\n            return {\r\n                ...form, \r\n                sections: [...sections],\r\n                hasChanges: true\r\n            };\r\n        }\r\n\r\n        case 'editFieldValue': {\r\n            // HACK: using index to identify a control could back-fire\r\n            const {sectionIndex} = form;\r\n            const {value, index, key} = action;\r\n            const section = form.sections[sectionIndex];\r\n            const controls = [...section.controls];\r\n\r\n            if(!section || !controls || !controls[index]) {\r\n                throw new Error(`Section or control specified does not appear to exist. Section: ${section}, controls: ${controls}`);\r\n            }\r\n\r\n            if(value === undefined || index === undefined || !key) {\r\n                throw new Error(`editFieldValue must be called with a value, key and index. You provided value: ${value}, key: ${key}, index: ${index}`);\r\n            }\r\n\r\n            controls[index][key] = value; \r\n\r\n            return {\r\n                ...form, \r\n                sections: [...form.sections],\r\n                hasChanges: true\r\n            };\r\n        }\r\n\r\n        case 'deleteControl': {\r\n            const {sectionIndex} = form;\r\n            const {index} = action;\r\n\r\n            const section = form.sections[sectionIndex];\r\n            section.controls.splice(index, 1);\r\n\r\n            return {\r\n                ...form, \r\n                sections: [...form.sections],\r\n                hasChanges: true\r\n            };\r\n        }\r\n\r\n        default: {\r\n            throw new Error(`Unhandled action type ${action.type}`)\r\n        }\r\n    }\r\n};\r\n\r\nconst FormProvider = ({children}) => {\r\n    const [form, dispatch] = useReducer(reducer, initialState);\r\n\r\n    if(form.hasChanges) {\r\n        debouncedOnSave(form, dispatch);\r\n    }\r\n\r\n    return (\r\n        <FormStateContext.Provider value={form}>\r\n            <FormDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </FormDispatchContext.Provider>\r\n        </FormStateContext.Provider>\r\n    );\r\n};\r\n\r\nconst useFormState = () => {\r\n    const context = React.useContext(FormStateContext);\r\n    \r\n    if(context === undefined) {\r\n        throw new Error('useFormState must be used within FormProvider')\r\n    }\r\n\r\n    return context;\r\n};\r\n\r\nconst useFormDispatch = () => {\r\n    const context = React.useContext(FormDispatchContext);\r\n    \r\n    if(context === undefined) {\r\n        throw new Error('useFormState must be used within FormProvider')\r\n    }\r\n\r\n    return context;\r\n};\r\n\r\nconst useForm = () => [useFormState(), useFormDispatch()];\r\n\r\nexport {\r\n    FormProvider,\r\n    useForm,\r\n    useFormState,\r\n    useFormDispatch\r\n};","import React from 'react';\r\nimport {useForm} from './FormContext';\r\n\r\nconst FormTitleCapture = () => {\r\n    const [form, dispatch] = useForm();\r\n\r\n    return (\r\n        <div id=\"form-name-section\">\r\n            <input \r\n                type=\"text\"\r\n                onChange={e => dispatch({type: \"setValue\", key: \"title\", value: e.target.value})}\r\n                value={form.title}\r\n                id=\"form-name\"\r\n            />\r\n            <label htmlFor=\"form-name\"><i className=\"fa fa-edit icon\"></i><span className=\"hide\">Edit Form Name</span></label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormTitleCapture;","import React from 'react';\r\nimport {useFormDispatch} from './FormContext';\r\nimport {useIsInFocus} from './common/Hooks';\r\n\r\nconst AddNewField = () => {\r\n    const dispatch = useFormDispatch();\r\n\r\n    return (\r\n        <button onClick={() => dispatch({type: \"addNewInputField\"})}>\r\n            Add field\r\n        </button>\r\n    );\r\n};\r\n\r\nconst EditStatic = ({label, index, type}) => {\r\n    const dispatch = useFormDispatch();\r\n    \r\n    return (\r\n        <div className=\"edit-mode\">\r\n            <input \r\n                type=\"text\"\r\n                onChange={e => dispatch({type: \"editFieldValue\", value: e.target.value, key: \"label\", index})}\r\n                placeholder=\"Header...\"\r\n                value={label}\r\n            />\r\n            <div className=\"type\">\r\n                <select onChange={e => dispatch({type: 'editFieldValue', index, key: 'type', value: e.target.value})} value={type}>\r\n                    <option value=\"text\">\r\n                        Text input\r\n                    </option>\r\n                    <option value=\"number\">\r\n                        Number input\r\n                    </option>\r\n                    <option value=\"title\">\r\n                        Title\r\n                    </option>\r\n                </select>\r\n            </div>\r\n            <div className=\"remove\">\r\n                <button onClick={() => dispatch({type: 'deleteControl', index})}>\r\n                    Delete\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EditInput = ({type, index, label, required}) => {\r\n    const dispatch = useFormDispatch();\r\n\r\n    return (\r\n        <div className=\"edit-mode\">\r\n            <label>\r\n                <input \r\n                    onChange={e => dispatch({type: 'editFieldValue', index, key: 'label', value: e.target.value})}\r\n                    type=\"text\"\r\n                    value={label}\r\n                />\r\n            </label>\r\n            <div className=\"required\">\r\n                <label>\r\n                    Required Field\r\n                    <input \r\n                        type=\"checkbox\"\r\n                        checked={required}\r\n                        onChange={() => dispatch({type: 'editFieldValue', index, key: 'required', value: !required})}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div className=\"type\">\r\n                <select onChange={e => dispatch({type: 'editFieldValue', index, key: 'type', value: e.target.value})} value={type}>\r\n                    <option value=\"text\">\r\n                        Text input\r\n                    </option>\r\n                    <option value=\"number\">\r\n                        Number input\r\n                    </option>\r\n                    <option value=\"title\">\r\n                        Title\r\n                    </option>\r\n                </select>\r\n            </div>\r\n            <div className=\"remove\">\r\n                <button onClick={() => dispatch({type: 'deleteControl', index})}>\r\n                    Delete\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst isStaticType = type => type === 'title';\r\n\r\nconst EditControl = props => (\r\n    <div className=\"edit-mode\">\r\n        {\r\n            isStaticType(props.type)\r\n            ? <EditStatic {...props} />\r\n            : <EditInput {...props} />\r\n        }\r\n    </div>\r\n);\r\n\r\nconst Text = ({label, required}) => (\r\n    <>\r\n        <label>\r\n            {label}\r\n            {\r\n                required\r\n                && <span className=\"error\">*</span>\r\n            }\r\n        </label>\r\n        <input \r\n            type=\"text\"\r\n        />\r\n    </>\r\n);\r\n\r\nconst NumberComp = ({label, required}) => (\r\n    <>\r\n        <label>\r\n            {label}\r\n            {\r\n                required\r\n                && <span className=\"error\">*</span>\r\n            }\r\n        </label>\r\n        <input \r\n            type=\"number\"\r\n        />\r\n    </>\r\n);\r\n\r\nconst Title = ({label}) => (\r\n    <div className=\"display-mode\">\r\n        <h3>{label}</h3>\r\n    </div>\r\n);\r\n\r\nconst controlForType = {\r\n    text: Text,\r\n    number: NumberComp,\r\n    title: Title\r\n};\r\n\r\nconst DisplayControl = ({type, ...controlProps}) => {\r\n    const Control = controlForType[type];\r\n\r\n    if(!Control) {\r\n        throw new Error(`Unsupported control type ${type}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"display-mode\">\r\n            <Control {...controlProps} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Field = props => {\r\n    const {isInFocus, onBlur, onFocus} = useIsInFocus();\r\n    \r\n    return (\r\n        <div \r\n            className=\"field\"\r\n            onBlur={onBlur}\r\n            onFocus={onFocus}\r\n            tabIndex=\"0\"\r\n        >\r\n            {\r\n                isInFocus\r\n                ? <EditControl {...props} />\r\n                : <DisplayControl {...props} />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormFields = ({controls}) => {\r\n\r\n    if(controls.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                controls.map((control, index) => <Field {...control} index={index} key={index} />)\r\n            }\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport {\r\n    AddNewField,\r\n    FormFields\r\n};","import {useState, useCallback} from 'react';\r\n\r\nconst useIsInFocus = () => {\r\n    const [isInFocus, setisInFocus] = useState(false);\r\n    // https://reactjs.org/docs/accessibility.html#mouse-and-pointer-events\r\n    const [focusTimeout, setFocusTimeout] = useState();\r\n\r\n    const onBlur = useCallback(() => {\r\n        const timeout = setTimeout(() => setisInFocus(false));                \r\n        setFocusTimeout(timeout);\r\n    }, [setFocusTimeout, setisInFocus]);\r\n\r\n    const onFocus = useCallback(() => {\r\n        clearTimeout(focusTimeout);\r\n        setisInFocus(true);\r\n    }, [focusTimeout, setisInFocus]);\r\n\r\n    return ({\r\n        isInFocus,\r\n        onBlur,\r\n        onFocus\r\n    });\r\n};\r\n\r\nexport {\r\n    useIsInFocus\r\n};","import React from 'react';\r\nimport {useFormState, useForm} from './FormContext';\r\nimport {FormFields} from './Field';\r\n\r\nconst Section = () => {\r\n    const form = useFormState();\r\n    const {sectionIndex} = form;\r\n\r\n    const section = form.sections[sectionIndex];\r\n    \r\n    if(!section) {\r\n        throw new Error(`No data found for requested section at index ${sectionIndex}`);\r\n    }\r\n\r\n    return (\r\n        <FormFields controls={section.controls} />\r\n    );\r\n};\r\n\r\nconst SectionControls = () => {\r\n    const [form, dispatch] = useForm();\r\n\r\n    const {sectionIndex} = form;\r\n    const numberOfSectons = form.sections.length;\r\n\r\n    return (\r\n        <>\r\n            <button onClick={() => dispatch({type: \"addNewSection\"})}>\r\n                Add new section\r\n            </button>\r\n            {\r\n                numberOfSectons > 1\r\n                && sectionIndex !== 0\r\n                && (\r\n                    <button onClick={() => dispatch({type: \"switchToPreviousSection\"})}>\r\n                        To Section {sectionIndex - 1}\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                numberOfSectons > 1\r\n                && sectionIndex !== numberOfSectons - 1\r\n                && (\r\n                    <button onClick={() => dispatch({type: \"switchToNextSection\"})}>\r\n                        To Section {sectionIndex + 1}\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                numberOfSectons > 1\r\n                && (\r\n                    <button onClick={() => dispatch({type: \"deleteSection\"})}>\r\n                        Delete this section\r\n                    </button>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport {\r\n    Section,\r\n    SectionControls\r\n};","import React from 'react';\nimport {FormProvider} from './FormContext';\nimport FormTitleCapture from './FormTitleCapture';\nimport {AddNewField} from './Field';\nimport {Section, SectionControls} from './Sections';\nimport './style/main.scss';\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<header><h1>Chameleon Form Builder</h1></header>\n\t\t<div className=\"content\">\n\t\t\t<FormProvider>\n\t\t\t\t<FormTitleCapture />\n\t\t\t\t<SectionControls />\n\t\t\t\t<Section />\n\t\t\t\t<AddNewField />\n\t\t\t</FormProvider>\n\t\t</div>\n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}